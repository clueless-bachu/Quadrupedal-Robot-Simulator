// Generated by gencpp from file control/Actuator.msg
// DO NOT EDIT!


#ifndef CONTROL_MESSAGE_ACTUATOR_H
#define CONTROL_MESSAGE_ACTUATOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control
{
template <class ContainerAllocator>
struct Actuator_
{
  typedef Actuator_<ContainerAllocator> Type;

  Actuator_()
    : header()
    , frontlefttop(0.0)
    , frontleftbottom(0.0)
    , frontrighttop(0.0)
    , frontrightbottom(0.0)
    , backlefttop(0.0)
    , backleftbottom(0.0)
    , backrighttop(0.0)
    , backrightbottom(0.0)
    , flj(0.0)
    , frj(0.0)
    , blj(0.0)
    , brj(0.0)  {
    }
  Actuator_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frontlefttop(0.0)
    , frontleftbottom(0.0)
    , frontrighttop(0.0)
    , frontrightbottom(0.0)
    , backlefttop(0.0)
    , backleftbottom(0.0)
    , backrighttop(0.0)
    , backrightbottom(0.0)
    , flj(0.0)
    , frj(0.0)
    , blj(0.0)
    , brj(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _frontlefttop_type;
  _frontlefttop_type frontlefttop;

   typedef double _frontleftbottom_type;
  _frontleftbottom_type frontleftbottom;

   typedef double _frontrighttop_type;
  _frontrighttop_type frontrighttop;

   typedef double _frontrightbottom_type;
  _frontrightbottom_type frontrightbottom;

   typedef double _backlefttop_type;
  _backlefttop_type backlefttop;

   typedef double _backleftbottom_type;
  _backleftbottom_type backleftbottom;

   typedef double _backrighttop_type;
  _backrighttop_type backrighttop;

   typedef double _backrightbottom_type;
  _backrightbottom_type backrightbottom;

   typedef double _flj_type;
  _flj_type flj;

   typedef double _frj_type;
  _frj_type frj;

   typedef double _blj_type;
  _blj_type blj;

   typedef double _brj_type;
  _brj_type brj;





  typedef boost::shared_ptr< ::control::Actuator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control::Actuator_<ContainerAllocator> const> ConstPtr;

}; // struct Actuator_

typedef ::control::Actuator_<std::allocator<void> > Actuator;

typedef boost::shared_ptr< ::control::Actuator > ActuatorPtr;
typedef boost::shared_ptr< ::control::Actuator const> ActuatorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control::Actuator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control::Actuator_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'control': ['/home/vasista/Desktop/quadrupedal_robot/src/control/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control::Actuator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::Actuator_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::Actuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::Actuator_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecf7f2c939d6596e550f5f3f0601f351";
  }

  static const char* value(const ::control::Actuator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecf7f2c939d6596eULL;
  static const uint64_t static_value2 = 0x550f5f3f0601f351ULL;
};

template<class ContainerAllocator>
struct DataType< ::control::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control/Actuator";
  }

  static const char* value(const ::control::Actuator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 frontlefttop\n\
float64 frontleftbottom\n\
float64 frontrighttop\n\
float64 frontrightbottom\n\
float64 backlefttop\n\
float64 backleftbottom\n\
float64 backrighttop\n\
float64 backrightbottom\n\
float64 flj\n\
float64 frj\n\
float64 blj\n\
float64 brj\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::control::Actuator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control::Actuator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frontlefttop);
      stream.next(m.frontleftbottom);
      stream.next(m.frontrighttop);
      stream.next(m.frontrightbottom);
      stream.next(m.backlefttop);
      stream.next(m.backleftbottom);
      stream.next(m.backrighttop);
      stream.next(m.backrightbottom);
      stream.next(m.flj);
      stream.next(m.frj);
      stream.next(m.blj);
      stream.next(m.brj);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Actuator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control::Actuator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control::Actuator_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frontlefttop: ";
    Printer<double>::stream(s, indent + "  ", v.frontlefttop);
    s << indent << "frontleftbottom: ";
    Printer<double>::stream(s, indent + "  ", v.frontleftbottom);
    s << indent << "frontrighttop: ";
    Printer<double>::stream(s, indent + "  ", v.frontrighttop);
    s << indent << "frontrightbottom: ";
    Printer<double>::stream(s, indent + "  ", v.frontrightbottom);
    s << indent << "backlefttop: ";
    Printer<double>::stream(s, indent + "  ", v.backlefttop);
    s << indent << "backleftbottom: ";
    Printer<double>::stream(s, indent + "  ", v.backleftbottom);
    s << indent << "backrighttop: ";
    Printer<double>::stream(s, indent + "  ", v.backrighttop);
    s << indent << "backrightbottom: ";
    Printer<double>::stream(s, indent + "  ", v.backrightbottom);
    s << indent << "flj: ";
    Printer<double>::stream(s, indent + "  ", v.flj);
    s << indent << "frj: ";
    Printer<double>::stream(s, indent + "  ", v.frj);
    s << indent << "blj: ";
    Printer<double>::stream(s, indent + "  ", v.blj);
    s << indent << "brj: ";
    Printer<double>::stream(s, indent + "  ", v.brj);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MESSAGE_ACTUATOR_H
